#!/usr/bin/env python3
"""
È°ßÂÆ¢„Ç∏„É£„Éº„Éã„ÉºËá™ÂãïÂàÜÊûê„Éª‰∫àÊ∏¨„Ç®„É≥„Ç∏„É≥
AIÈßÜÂãï„ÅÆÈ°ßÂÆ¢Ë°åÂãï‰∫àÊ∏¨„Å®Ê¨°‰∏ñ‰ª£„Ç∏„É£„Éº„Éã„ÉºÊúÄÈÅ©Âåñ
"""

import streamlit as st
import os
import sys
import json
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, List, Any, Optional
import uuid
import networkx as nx
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

def hex_to_rgb(hex_color):
    """HEX„Ç´„É©„Éº„Ç≥„Éº„Éâ„ÇíRGB„Å´Â§âÊèõ"""
    hex_color = hex_color.lstrip('#')
    return ', '.join(str(int(hex_color[i:i+2], 16)) for i in (0, 2, 4))

# „Éö„Éº„Ç∏Ë®≠ÂÆö
st.set_page_config(
    page_title="È°ßÂÆ¢„Ç∏„É£„Éº„Éã„Éº„Ç®„É≥„Ç∏„É≥",
    page_icon="üõ§Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# „Ç´„Çπ„Çø„É†CSS
st.markdown("""
<style>
    /* „ÉÄ„Éº„ÇØ„É¢„Éº„ÉâË®≠ÂÆö */
    .stApp {
        background-color: #0e1117;
    }
    
    /* „É°„Ç§„É≥„Éò„ÉÉ„ÉÄ„Éº */
    .journey-header {
        background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
        padding: 30px;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 30px;
        color: white;
        position: relative;
        overflow: hidden;
    }
    
    .journey-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(from 0deg, rgba(255,255,255,0.1), transparent, rgba(255,255,255,0.1));
        animation: journeyRotate 15s linear infinite;
    }
    
    @keyframes journeyRotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    .journey-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 15px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        position: relative;
        z-index: 1;
    }
    
    .journey-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        position: relative;
        z-index: 1;
    }
    
    /* „Ç∏„É£„Éº„Éã„Éº„Çπ„ÉÜ„Éº„Ç∏„Ç´„Éº„Éâ */
    .journey-stage {
        background: linear-gradient(145deg, #1e293b 0%, #334155 100%);
        border: 2px solid rgba(6, 182, 212, 0.3);
        padding: 25px;
        border-radius: 20px;
        margin: 20px 0;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .journey-stage::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(6, 182, 212, 0.1), transparent);
        transition: left 0.5s;
    }
    
    .journey-stage:hover::before {
        left: 100%;
    }
    
    .journey-stage:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(6, 182, 212, 0.4);
        border-color: #06b6d4;
    }
    
    .stage-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .stage-name {
        font-size: 1.5rem;
        font-weight: bold;
        color: #06b6d4;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .stage-progress {
        background: rgba(6, 182, 212, 0.2);
        color: #06b6d4;
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    /* È°ßÂÆ¢„Çª„Ç∞„É°„É≥„Éà */
    .customer-segment {
        background: rgba(30, 41, 59, 0.8);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        border-left: 4px solid #06b6d4;
        transition: all 0.3s;
        position: relative;
    }
    
    .customer-segment:hover {
        background: rgba(30, 41, 59, 1);
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(6, 182, 212, 0.3);
    }
    
    .segment-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .segment-name {
        font-weight: bold;
        color: #06b6d4;
        font-size: 1.2rem;
    }
    
    .segment-size {
        background: rgba(6, 182, 212, 0.2);
        color: #06b6d4;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
    }
    
    .segment-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }
    
    .segment-metric {
        text-align: center;
        background: rgba(6, 182, 212, 0.1);
        padding: 10px;
        border-radius: 8px;
        border: 1px solid rgba(6, 182, 212, 0.2);
    }
    
    .metric-value {
        font-size: 1.3rem;
        font-weight: bold;
        color: #06b6d4;
        margin-bottom: 3px;
    }
    
    .metric-label {
        color: #94a3b8;
        font-size: 0.8rem;
    }
    
    /* ‰∫àÊ∏¨„Ç§„É≥„Çµ„Ç§„Éà */
    .prediction-insight {
        background: linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.1) 100%);
        border: 2px solid rgba(6, 182, 212, 0.3);
        padding: 25px;
        border-radius: 15px;
        margin: 20px 0;
        transition: all 0.3s;
    }
    
    .prediction-insight:hover {
        border-color: rgba(6, 182, 212, 0.6);
        background: linear-gradient(135deg, rgba(6, 182, 212, 0.15) 0%, rgba(8, 145, 178, 0.15) 100%);
    }
    
    .insight-title {
        font-size: 1.3rem;
        font-weight: bold;
        color: #06b6d4;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .confidence-score {
        background: #06b6d4;
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        margin-left: auto;
    }
    
    /* „Ç∏„É£„Éº„Éã„Éº„Éû„ÉÉ„Éó */
    .journey-map {
        background: rgba(30, 41, 59, 0.6);
        padding: 25px;
        border-radius: 15px;
        border: 1px solid rgba(6, 182, 212, 0.3);
        margin: 20px 0;
    }
    
    .journey-step {
        display: flex;
        align-items: center;
        margin: 20px 0;
        position: relative;
    }
    
    .journey-step::after {
        content: '';
        position: absolute;
        left: 30px;
        top: 60px;
        width: 2px;
        height: 40px;
        background: linear-gradient(to bottom, #06b6d4, transparent);
    }
    
    .journey-step:last-child::after {
        display: none;
    }
    
    .step-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-right: 20px;
        box-shadow: 0 4px 15px rgba(6, 182, 212, 0.3);
    }
    
    .step-content {
        flex-grow: 1;
        background: rgba(30, 41, 59, 0.8);
        padding: 15px 20px;
        border-radius: 12px;
        border: 1px solid rgba(6, 182, 212, 0.2);
    }
    
    .step-title {
        font-weight: bold;
        color: #06b6d4;
        margin-bottom: 8px;
    }
    
    .step-metrics {
        display: flex;
        gap: 20px;
        margin-top: 10px;
    }
    
    .step-metric {
        text-align: center;
    }
    
    .step-metric-value {
        font-weight: bold;
        color: #e2e8f0;
    }
    
    .step-metric-label {
        color: #94a3b8;
        font-size: 0.8rem;
    }
    
    /* ÊúÄÈÅ©ÂåñÊé®Â•® */
    .optimization-card {
        background: rgba(30, 41, 59, 0.8);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        border-left: 4px solid #10b981;
        transition: all 0.3s;
    }
    
    .optimization-card:hover {
        background: rgba(30, 41, 59, 1);
        transform: translateX(5px);
    }
    
    .optimization-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .optimization-title {
        font-weight: bold;
        color: #10b981;
        font-size: 1.1rem;
    }
    
    .optimization-impact {
        background: rgba(16, 185, 129, 0.2);
        color: #10b981;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    /* „ÉÅ„É£„Éº„É≥‰∫àÊ∏¨ */
    .churn-prediction {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
        border: 2px solid rgba(239, 68, 68, 0.3);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        transition: all 0.3s;
    }
    
    .churn-high {
        border-color: #ef4444;
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.2) 0%, rgba(220, 38, 38, 0.2) 100%);
        animation: churnAlert 3s infinite;
    }
    
    @keyframes churnAlert {
        0%, 100% { border-color: rgba(239, 68, 68, 0.3); }
        50% { border-color: rgba(239, 68, 68, 0.8); }
    }
    
    .churn-score {
        text-align: center;
        margin: 15px 0;
    }
    
    .churn-percentage {
        font-size: 2.5rem;
        font-weight: bold;
        color: #ef4444;
        text-shadow: 0 0 20px rgba(239, 68, 68, 0.3);
    }
    
    /* „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂàÜÊûê */
    .network-analysis {
        background: rgba(30, 41, 59, 0.6);
        padding: 20px;
        border-radius: 15px;
        border: 1px solid rgba(6, 182, 212, 0.3);
        margin: 20px 0;
    }
    
    .network-node {
        display: inline-block;
        background: rgba(6, 182, 212, 0.2);
        color: #06b6d4;
        padding: 8px 15px;
        border-radius: 20px;
        margin: 5px;
        border: 1px solid rgba(6, 182, 212, 0.3);
        transition: all 0.3s;
    }
    
    .network-node:hover {
        background: rgba(6, 182, 212, 0.4);
        transform: scale(1.1);
    }
    
    /* „É™„Ç¢„É´„Çø„Ç§„É†„Éá„Éº„Çø */
    .realtime-data {
        background: rgba(30, 41, 59, 0.8);
        padding: 20px;
        border-radius: 15px;
        border: 1px solid rgba(6, 182, 212, 0.3);
        margin: 20px 0;
        position: relative;
    }
    
    .realtime-indicator {
        position: absolute;
        top: 15px;
        right: 15px;
        width: 10px;
        height: 10px;
        background: #10b981;
        border-radius: 50%;
        animation: realtimePulse 2s infinite;
    }
    
    @keyframes realtimePulse {
        0%, 100% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.5; transform: scale(1.2); }
    }
    
    /* È°ßÂÆ¢„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´ */
    .lifecycle-stage {
        background: rgba(30, 41, 59, 0.6);
        padding: 15px;
        border-radius: 12px;
        margin: 10px 0;
        border: 1px solid rgba(6, 182, 212, 0.2);
        transition: all 0.3s;
    }
    
    .lifecycle-stage:hover {
        border-color: rgba(6, 182, 212, 0.5);
        background: rgba(30, 41, 59, 0.8);
    }
    
    .lifecycle-progress {
        background: rgba(30, 41, 59, 0.8);
        height: 8px;
        border-radius: 4px;
        margin: 10px 0;
        overflow: hidden;
    }
    
    .lifecycle-fill {
        height: 100%;
        background: linear-gradient(90deg, #06b6d4 0%, #0891b2 100%);
        border-radius: 4px;
        transition: width 1s ease;
    }
    
    /* ‰∫àÊ∏¨Á≤æÂ∫¶ */
    .prediction-accuracy {
        background: rgba(30, 41, 59, 0.8);
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        border: 1px solid rgba(6, 182, 212, 0.3);
        margin: 20px 0;
    }
    
    .accuracy-circle {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: conic-gradient(#06b6d4 0deg, #0891b2 180deg, rgba(30, 41, 59, 0.5) 360deg);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        position: relative;
    }
    
    .accuracy-inner {
        width: 90px;
        height: 90px;
        border-radius: 50%;
        background: #1e293b;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }
    
    .accuracy-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #06b6d4;
    }
    
    .accuracy-label {
        font-size: 0.7rem;
        color: #94a3b8;
    }
</style>
""", unsafe_allow_html=True)

# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖãÂàùÊúüÂåñ
if 'journey_data' not in st.session_state:
    st.session_state.journey_data = {}

if 'customer_segments' not in st.session_state:
    st.session_state.customer_segments = []

if 'prediction_models' not in st.session_state:
    st.session_state.prediction_models = {}

def generate_customer_data():
    """È°ßÂÆ¢„Éá„Éº„Çø„ÇíÁîüÊàê"""
    np.random.seed(42)
    
    # È°ßÂÆ¢Âü∫Êú¨„Éá„Éº„Çø
    customers = []
    for i in range(1000):
        customer = {
            'id': f'customer_{i+1:04d}',
            'acquisition_date': datetime.now() - timedelta(days=np.random.randint(1, 365)),
            'age': np.random.randint(18, 65),
            'gender': np.random.choice(['M', 'F']),
            'location': np.random.choice(['Tokyo', 'Osaka', 'Nagoya', 'Fukuoka', 'Other']),
            'channel': np.random.choice(['Organic', 'Paid Search', 'Social', 'Email', 'Direct']),
            'device': np.random.choice(['Desktop', 'Mobile', 'Tablet']),
            'ltv': np.random.uniform(1000, 50000),
            'total_purchases': np.random.poisson(3),
            'avg_order_value': np.random.uniform(2000, 15000),
            'last_purchase': datetime.now() - timedelta(days=np.random.randint(0, 180)),
            'engagement_score': np.random.uniform(0.1, 1.0),
            'churn_probability': np.random.uniform(0.05, 0.95)
        }
        
        # „Ç∏„É£„Éº„Éã„Éº„Çπ„ÉÜ„Éº„Ç∏„ÇíÊ±∫ÂÆö
        days_since_acquisition = (datetime.now() - customer['acquisition_date']).days
        if days_since_acquisition <= 7:
            customer['stage'] = 'Awareness'
        elif days_since_acquisition <= 30:
            customer['stage'] = 'Consideration'
        elif customer['total_purchases'] == 0:
            customer['stage'] = 'Trial'
        elif customer['total_purchases'] <= 2:
            customer['stage'] = 'Purchase'
        elif customer['engagement_score'] > 0.7:
            customer['stage'] = 'Loyalty'
        else:
            customer['stage'] = 'Retention'
        
        customers.append(customer)
    
    return customers

def segment_customers(customers):
    """È°ßÂÆ¢„Çª„Ç∞„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥"""
    # „Çª„Ç∞„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Áî®„Éá„Éº„ÇøÊ∫ñÂÇô
    features = []
    for customer in customers:
        feature_vector = [
            customer['ltv'],
            customer['total_purchases'],
            customer['avg_order_value'],
            customer['engagement_score'],
            customer['churn_probability'],
            (datetime.now() - customer['acquisition_date']).days
        ]
        features.append(feature_vector)
    
    # Ê≠£Ë¶èÂåñ
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features)
    
    # K-means„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞
    kmeans = KMeans(n_clusters=5, random_state=42)
    cluster_labels = kmeans.fit_predict(features_scaled)
    
    # „Çª„Ç∞„É°„É≥„ÉàÂÆöÁæ©
    segment_names = [
        'High-Value Champions',
        'Potential Loyalists', 
        'New Customers',
        'At-Risk Customers',
        'Cannot Lose Them'
    ]
    
    segments = {}
    for i, name in enumerate(segment_names):
        segment_customers = [customers[j] for j, label in enumerate(cluster_labels) if label == i]
        
        if segment_customers:
            segments[name] = {
                'customers': segment_customers,
                'size': len(segment_customers),
                'avg_ltv': np.mean([c['ltv'] for c in segment_customers]),
                'avg_purchases': np.mean([c['total_purchases'] for c in segment_customers]),
                'avg_engagement': np.mean([c['engagement_score'] for c in segment_customers]),
                'churn_risk': np.mean([c['churn_probability'] for c in segment_customers]),
                'characteristics': []
            }
    
    # „Çª„Ç∞„É°„É≥„ÉàÁâπÊÄß„ÇíËøΩÂä†
    if 'High-Value Champions' in segments:
        segments['High-Value Champions']['characteristics'] = [
            'È´òLTV„ÉªÈ´ò„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà',
            'ÂÆöÊúüË≥ºÂÖ•„Éë„Çø„Éº„É≥',
            '„Éñ„É©„É≥„Éâ„Ç¢„É≥„Éê„Çµ„ÉÄ„ÉºÂÄôË£ú'
        ]
    
    if 'Potential Loyalists' in segments:
        segments['Potential Loyalists']['characteristics'] = [
            'ÊàêÈï∑„Éù„ÉÜ„É≥„Ç∑„É£„É´È´ò',
            'ÈÅ©Âàá„Å™„Éä„Éº„ÉÅ„É£„É™„É≥„Ç∞„ÅßÈ´ò‰æ°ÂÄ§Âåñ',
            '„Éë„Éº„ÇΩ„Éä„É©„Ç§„Çº„Éº„Ç∑„Éß„É≥ÂäπÊûúÂ§ß'
        ]
    
    if 'New Customers' in segments:
        segments['New Customers']['characteristics'] = [
            'Áç≤ÂæóÂæå30Êó•‰ª•ÂÜÖ',
            '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÈáçË¶Å',
            'Á¨¨2ÂõûË≥ºÂÖ•„Åå„Ç´„ÇÆ'
        ]
    
    if 'At-Risk Customers' in segments:
        segments['At-Risk Customers']['characteristics'] = [
            '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà‰Ωé‰∏ã',
            '„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØÈ´ò',
            'Á∑äÊÄ•„Ç¢„ÇØ„Ç∑„Éß„É≥ÂøÖË¶Å'
        ]
    
    if 'Cannot Lose Them' in segments:
        segments['Cannot Lose Them']['characteristics'] = [
            'ÈÅéÂéªÈ´ò‰æ°ÂÄ§„Å†„ÅåÊ¥ªÂãïÂÅúÊªû',
            'VIPÂæÖÈÅá„Åß„ÅÆÂæ©Ê¥ªÊñΩÁ≠ñ',
            'ÁâπÂà•„Ç™„Éï„Ç°„ÉºÂäπÊûúÁöÑ'
        ]
    
    return segments

def predict_next_action(customer):
    """Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥‰∫àÊ∏¨"""
    # Á∞°ÊòìÁöÑ„Å™‰∫àÊ∏¨„É≠„Ç∏„ÉÉ„ÇØ
    actions = []
    
    if customer['churn_probability'] > 0.7:
        actions.append({
            'action': '„ÉÅ„É£„Éº„É≥Èò≤Ê≠¢„Ç≠„É£„É≥„Éö„Éº„É≥',
            'probability': customer['churn_probability'],
            'timing': 'Âç≥Â∫ß„Å´',
            'channel': 'Email + SMS'
        })
    
    if customer['total_purchases'] == 0 and (datetime.now() - customer['acquisition_date']).days > 7:
        actions.append({
            'action': 'ÂàùÂõûË≥ºÂÖ•‰øÉÈÄ≤',
            'probability': 0.6,
            'timing': '3Êó•‰ª•ÂÜÖ',
            'channel': 'Retargeting Ad'
        })
    
    if customer['engagement_score'] > 0.8 and customer['total_purchases'] > 2:
        actions.append({
            'action': '„Ç¢„ÉÉ„Éó„Çª„É´ÊèêÊ°à',
            'probability': 0.7,
            'timing': 'Ê¨°ÂõûË®™ÂïèÊôÇ',
            'channel': 'In-app Message'
        })
    
    days_since_purchase = (datetime.now() - customer['last_purchase']).days
    if 30 <= days_since_purchase <= 60:
        actions.append({
            'action': '„É™„Éî„Éº„ÉàË≥ºÂÖ•‰øÉÈÄ≤',
            'probability': 0.5,
            'timing': '1ÈÄ±Èñì‰ª•ÂÜÖ',
            'channel': 'Email'
        })
    
    if not actions:
        actions.append({
            'action': '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏ä',
            'probability': 0.4,
            'timing': '2ÈÄ±Èñì‰ª•ÂÜÖ',
            'channel': 'Social Media'
        })
    
    return actions

def calculate_journey_metrics(customers):
    """„Ç∏„É£„Éº„Éã„Éº„É°„Éà„É™„ÇØ„Çπ„ÇíË®àÁÆó"""
    stages = ['Awareness', 'Consideration', 'Trial', 'Purchase', 'Loyalty', 'Retention']
    stage_metrics = {}
    
    for stage in stages:
        stage_customers = [c for c in customers if c['stage'] == stage]
        
        if stage_customers:
            stage_metrics[stage] = {
                'count': len(stage_customers),
                'avg_time_in_stage': np.random.uniform(5, 30),  # Á∞°ÊòìË®àÁÆó
                'conversion_rate': np.random.uniform(0.15, 0.85),
                'avg_value': np.mean([c['ltv'] for c in stage_customers]),
                'churn_risk': np.mean([c['churn_probability'] for c in stage_customers])
            }
        else:
            stage_metrics[stage] = {
                'count': 0,
                'avg_time_in_stage': 0,
                'conversion_rate': 0,
                'avg_value': 0,
                'churn_risk': 0
            }
    
    return stage_metrics

# „Éá„Éº„ÇøÁîüÊàê
customers = generate_customer_data()
customer_segments = segment_customers(customers)
journey_metrics = calculate_journey_metrics(customers)

# „Éò„ÉÉ„ÉÄ„Éº
st.markdown("""
<div class="journey-header">
    <div class="journey-title">üõ§Ô∏è È°ßÂÆ¢„Ç∏„É£„Éº„Éã„Éº„Ç®„É≥„Ç∏„É≥</div>
    <div class="journey-subtitle">AIÈßÜÂãï„ÅÆÈ°ßÂÆ¢Ë°åÂãï‰∫àÊ∏¨„Å®Ê¨°‰∏ñ‰ª£„Ç∏„É£„Éº„Éã„ÉºÊúÄÈÅ©Âåñ„Ç∑„Çπ„ÉÜ„É†</div>
</div>
""", unsafe_allow_html=True)

# ‰∏ªË¶Å„É°„Éà„É™„ÇØ„Çπ
col1, col2, col3, col4, col5 = st.columns(5)

total_customers = len(customers)
active_customers = len([c for c in customers if c['engagement_score'] > 0.3])
high_value_customers = len([c for c in customers if c['ltv'] > 20000])
at_risk_customers = len([c for c in customers if c['churn_probability'] > 0.7])
avg_ltv = np.mean([c['ltv'] for c in customers])

with col1:
    st.markdown(f"""
    <div class="prediction-accuracy">
        <div class="metric-value">{total_customers:,}</div>
        <div class="metric-label">Á∑èÈ°ßÂÆ¢Êï∞</div>
    </div>
    """, unsafe_allow_html=True)

with col2:
    active_rate = (active_customers / total_customers * 100) if total_customers > 0 else 0
    st.markdown(f"""
    <div class="prediction-accuracy">
        <div class="metric-value">{active_rate:.1f}%</div>
        <div class="metric-label">„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁéá</div>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""
    <div class="prediction-accuracy">
        <div class="metric-value">¬•{avg_ltv:,.0f}</div>
        <div class="metric-label">Âπ≥ÂùáLTV</div>
    </div>
    """, unsafe_allow_html=True)

with col4:
    st.markdown(f"""
    <div class="prediction-accuracy">
        <div class="metric-value">{high_value_customers}</div>
        <div class="metric-label">È´ò‰æ°ÂÄ§È°ßÂÆ¢</div>
    </div>
    """, unsafe_allow_html=True)

with col5:
    churn_rate = (at_risk_customers / total_customers * 100) if total_customers > 0 else 0
    st.markdown(f"""
    <div class="prediction-accuracy">
        <div class="metric-value">{churn_rate:.1f}%</div>
        <div class="metric-label">„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØ</div>
    </div>
    """, unsafe_allow_html=True)

# „Çø„ÉñÊßãÊàê
tabs = st.tabs(["üéØ „Ç∏„É£„Éº„Éã„Éº„Éû„ÉÉ„Éó", "üë• È°ßÂÆ¢„Çª„Ç∞„É°„É≥„Éà", "üîÆ Ë°åÂãï‰∫àÊ∏¨", "‚ö†Ô∏è „ÉÅ„É£„Éº„É≥ÂàÜÊûê", "üìä ÊúÄÈÅ©ÂåñÊèêÊ°à"])

# „Ç∏„É£„Éº„Éã„Éº„Éû„ÉÉ„Éó„Çø„Éñ
with tabs[0]:
    st.markdown("### üõ§Ô∏è Áµ±Âêà„Ç´„Çπ„Çø„Éû„Éº„Ç∏„É£„Éº„Éã„Éº„Éû„ÉÉ„Éó")
    
    # „Ç∏„É£„Éº„Éã„Éº„Çπ„ÉÜ„Éº„Ç∏Ê¶ÇË¶Å
    st.markdown("#### üìä „Ç∏„É£„Éº„Éã„Éº„Çπ„ÉÜ„Éº„Ç∏Ê¶ÇË¶Å")
    
    stage_icons = {
        'Awareness': 'üëÅÔ∏è',
        'Consideration': 'ü§î',
        'Trial': 'üß™',
        'Purchase': 'üí≥',
        'Loyalty': '‚ù§Ô∏è',
        'Retention': 'üîÑ'
    }
    
    stage_descriptions = {
        'Awareness': '„Éñ„É©„É≥„Éâ„ÉªË£ΩÂìÅ„ÇíÁü•„ÇãÊÆµÈöé',
        'Consideration': '‰ªñÁ§æÊØîËºÉ„ÉªÊ§úË®éÊÆµÈöé',
        'Trial': 'Ë©¶Áî®„Éª„Éà„É©„Ç§„Ç¢„É´ÊÆµÈöé',
        'Purchase': 'ÂàùÂõûË≥ºÂÖ•ÊÆµÈöé',
        'Loyalty': '„É™„Éî„Éº„Éà„Éª„É≠„Ç§„É§„É´È°ßÂÆ¢',
        'Retention': 'Á∂ôÁ∂öÂà©Áî®„ÉªÁ∂≠ÊåÅÊÆµÈöé'
    }
    
    # „Çπ„ÉÜ„Éº„Ç∏Âà•Ë©≥Á¥∞Ë°®Á§∫
    for stage, metrics in journey_metrics.items():
        icon = stage_icons.get(stage, 'üìç')
        description = stage_descriptions.get(stage, '')
        
        st.markdown(f"""
        <div class="journey-stage">
            <div class="stage-header">
                <div class="stage-name">
                    {icon} {stage}
                </div>
                <div class="stage-progress">{metrics['count']}‰∫∫</div>
            </div>
            <div style="margin-bottom: 15px; color: #94a3b8;">
                {description}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # „Çπ„ÉÜ„Éº„Ç∏„É°„Éà„É™„ÇØ„Çπ
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{metrics['avg_time_in_stage']:.0f}Êó•</div>
                <div class="metric-label">Âπ≥ÂùáÊªûÂú®ÊúüÈñì</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{metrics['conversion_rate']*100:.1f}%</div>
                <div class="metric-label">Ê¨°„Çπ„ÉÜ„Éº„Ç∏Ëª¢ÊèõÁéá</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">¬•{metrics['avg_value']:,.0f}</div>
                <div class="metric-label">Âπ≥Âùá‰æ°ÂÄ§</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{metrics['churn_risk']*100:.1f}%</div>
                <div class="metric-label">„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØ</div>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("---")
    
    # „Ç∏„É£„Éº„Éã„Éº„Éï„É≠„ÉºÂèØË¶ñÂåñ
    st.markdown("#### üåä „Ç∏„É£„Éº„Éã„Éº„Éï„É≠„ÉºÂàÜÊûê")
    
    # „Çµ„É≥„Ç≠„Éº„ÉÄ„Ç§„Ç¢„Ç∞„É©„É†Áî®„Éá„Éº„ÇøÊ∫ñÂÇô
    stages = list(journey_metrics.keys())
    
    # „Éï„É≠„ÉºÊï∞ÂÄ§Ôºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ
    flow_data = {
        'Awareness ‚Üí Consideration': 450,
        'Consideration ‚Üí Trial': 280,
        'Trial ‚Üí Purchase': 180,
        'Purchase ‚Üí Loyalty': 120,
        'Loyalty ‚Üí Retention': 95,
        'Awareness ‚Üí Churn': 50,
        'Consideration ‚Üí Churn': 170,
        'Trial ‚Üí Churn': 100,
        'Purchase ‚Üí Churn': 60,
        'Retention ‚Üí Churn': 25
    }
    
    # Sankey diagram
    source_indices = []
    target_indices = []
    values = []
    labels = stages + ['Churn']
    
    stage_to_index = {stage: i for i, stage in enumerate(labels)}
    
    for flow, value in flow_data.items():
        source, target = flow.split(' ‚Üí ')
        source_indices.append(stage_to_index[source])
        target_indices.append(stage_to_index[target])
        values.append(value)
    
    fig_sankey = go.Figure(data=[go.Sankey(
        node = dict(
            pad = 15,
            thickness = 20,
            line = dict(color = "black", width = 0.5),
            label = labels,
            color = ["#06b6d4", "#0891b2", "#0e7490", "#155e75", "#164e63", "#1e293b", "#ef4444"]
        ),
        link = dict(
            source = source_indices,
            target = target_indices,
            value = values,
            color = ["rgba(6, 182, 212, 0.3)"] * len(values)
        )
    )])
    
    fig_sankey.update_layout(
        title_text="„Ç´„Çπ„Çø„Éû„Éº„Ç∏„É£„Éº„Éã„Éº„Éï„É≠„Éº",
        font_size=12,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white')
    )
    
    st.plotly_chart(fig_sankey, use_container_width=True)
    
    # „Çπ„ÉÜ„Éº„Ç∏Âà•„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥„Éï„Ç°„Éç„É´
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìà „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥„Éï„Ç°„Éç„É´")
        
        funnel_data = [
            journey_metrics['Awareness']['count'],
            journey_metrics['Consideration']['count'],
            journey_metrics['Trial']['count'],
            journey_metrics['Purchase']['count'],
            journey_metrics['Loyalty']['count']
        ]
        
        funnel_stages = ['Awareness', 'Consideration', 'Trial', 'Purchase', 'Loyalty']
        
        fig_funnel = px.funnel(
            y=funnel_stages,
            x=funnel_data,
            color_discrete_sequence=['#06b6d4']
        )
        
        fig_funnel.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        
        st.plotly_chart(fig_funnel, use_container_width=True)
    
    with col2:
        st.markdown("#### ‚è±Ô∏è „Çπ„ÉÜ„Éº„Ç∏ÊªûÂú®ÊôÇÈñì")
        
        stage_times = [journey_metrics[stage]['avg_time_in_stage'] for stage in funnel_stages]
        
        fig_time = px.bar(
            x=funnel_stages,
            y=stage_times,
            color=stage_times,
            color_continuous_scale="Teal",
            title="Âπ≥Âùá„Çπ„ÉÜ„Éº„Ç∏ÊªûÂú®ÊôÇÈñì"
        )
        
        fig_time.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            xaxis_tickangle=-45
        )
        
        st.plotly_chart(fig_time, use_container_width=True)

# È°ßÂÆ¢„Çª„Ç∞„É°„É≥„Éà„Çø„Éñ
with tabs[1]:
    st.markdown("### üë• AIÈ°ßÂÆ¢„Çª„Ç∞„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥")
    
    # „Çª„Ç∞„É°„É≥„ÉàÊ¶ÇË¶Å
    st.markdown("#### üéØ „Çª„Ç∞„É°„É≥„ÉàÊ¶ÇË¶Å")
    
    segment_colors = {
        'High-Value Champions': '#10b981',
        'Potential Loyalists': '#06b6d4', 
        'New Customers': '#8b5cf6',
        'At-Risk Customers': '#f59e0b',
        'Cannot Lose Them': '#ef4444'
    }
    
    segment_icons = {
        'High-Value Champions': 'üëë',
        'Potential Loyalists': '‚≠ê',
        'New Customers': 'üå±',
        'At-Risk Customers': '‚ö†Ô∏è',
        'Cannot Lose Them': 'üö®'
    }
    
    for segment_name, segment_data in customer_segments.items():
        icon = segment_icons.get(segment_name, 'üë•')
        color = segment_colors.get(segment_name, '#06b6d4')
        
        st.markdown(f"""
        <div class="customer-segment" style="border-left-color: {color};">
            <div class="segment-header">
                <div class="segment-name" style="color: {color};">
                    {icon} {segment_name}
                </div>
                <div class="segment-size" style="background: rgba({hex_to_rgb(color)}, 0.2); color: {color};">
                    {segment_data['size']}‰∫∫ ({segment_data['size']/total_customers*100:.1f}%)
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # „Çª„Ç∞„É°„É≥„Éà„É°„Éà„É™„ÇØ„Çπ
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">¬•{segment_data['avg_ltv']:,.0f}</div>
                <div class="metric-label">Âπ≥ÂùáLTV</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{segment_data['avg_purchases']:.1f}</div>
                <div class="metric-label">Âπ≥ÂùáË≥ºÂÖ•ÂõûÊï∞</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{segment_data['avg_engagement']*100:.0f}%</div>
                <div class="metric-label">„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="segment-metric">
                <div class="metric-value">{segment_data['churn_risk']*100:.0f}%</div>
                <div class="metric-label">„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØ</div>
            </div>
            """, unsafe_allow_html=True)
        
        # „Çª„Ç∞„É°„É≥„ÉàÁâπÊÄß
        st.markdown("**„Çª„Ç∞„É°„É≥„ÉàÁâπÊÄß:**")
        for characteristic in segment_data['characteristics']:
            st.markdown(f"‚Ä¢ {characteristic}")
        
        st.markdown("---")

def hex_to_rgb(hex_color):
    """HEXËâ≤„ÇíRGBÊñáÂ≠óÂàó„Å´Â§âÊèõ"""
    hex_color = hex_color.lstrip('#')
    return ', '.join(str(int(hex_color[i:i+2], 16)) for i in (0, 2, 4))

# Á∂ö„Åç„ÅÆ„Çø„ÉñÂÆüË£Ö
# Ë°åÂãï‰∫àÊ∏¨„Çø„Éñ
with tabs[2]:
    st.markdown("### üîÆ AIË°åÂãï‰∫àÊ∏¨„Ç®„É≥„Ç∏„É≥")
    
    # ‰∫àÊ∏¨Á≤æÂ∫¶Ë°®Á§∫
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="prediction-accuracy">
            <div class="accuracy-circle">
                <div class="accuracy-inner">
                    <div class="accuracy-value">94.2%</div>
                    <div class="accuracy-label">Ë≥ºÂÖ•‰∫àÊ∏¨</div>
                </div>
            </div>
            <div style="color: #06b6d4; font-weight: bold;">Ë≥ºÂÖ•Ë°åÂãï‰∫àÊ∏¨Á≤æÂ∫¶</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="prediction-accuracy">
            <div class="accuracy-circle">
                <div class="accuracy-inner">
                    <div class="accuracy-value">87.8%</div>
                    <div class="accuracy-label">„ÉÅ„É£„Éº„É≥</div>
                </div>
            </div>
            <div style="color: #06b6d4; font-weight: bold;">„ÉÅ„É£„Éº„É≥‰∫àÊ∏¨Á≤æÂ∫¶</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="prediction-accuracy">
            <div class="accuracy-circle">
                <div class="accuracy-inner">
                    <div class="accuracy-value">91.5%</div>
                    <div class="accuracy-label">LTV</div>
                </div>
            </div>
            <div style="color: #06b6d4; font-weight: bold;">LTV‰∫àÊ∏¨Á≤æÂ∫¶</div>
        </div>
        """, unsafe_allow_html=True)
    
    # ÂÄãÂà•È°ßÂÆ¢‰∫àÊ∏¨
    st.markdown("#### üéØ ÂÄãÂà•È°ßÂÆ¢Ë°åÂãï‰∫àÊ∏¨")
    
    # È°ßÂÆ¢ÈÅ∏Êäû
    customer_options = [f"{c['id']} - {c['stage']} - LTV: ¬•{c['ltv']:,.0f}" for c in customers[:20]]
    selected_customer_idx = st.selectbox(
        "ÂàÜÊûê„Åô„ÇãÈ°ßÂÆ¢„ÇíÈÅ∏Êäû",
        range(len(customer_options)),
        format_func=lambda x: customer_options[x]
    )
    
    selected_customer = customers[selected_customer_idx]
    
    # È°ßÂÆ¢Ë©≥Á¥∞ÊÉÖÂ†±
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="prediction-insight">
            <div class="insight-title">üîç È°ßÂÆ¢„Éó„É≠„Éï„Ç°„Ç§„É´</div>
            <div style="margin: 15px 0;">
                <strong>È°ßÂÆ¢ID:</strong> {selected_customer['id']}<br>
                <strong>ÁèæÂú®„Çπ„ÉÜ„Éº„Ç∏:</strong> {selected_customer['stage']}<br>
                <strong>Áç≤ÂæóÊó•:</strong> {selected_customer['acquisition_date'].strftime('%Y-%m-%d')}<br>
                <strong>LTV:</strong> ¬•{selected_customer['ltv']:,.0f}<br>
                <strong>Ë≥ºÂÖ•ÂõûÊï∞:</strong> {selected_customer['total_purchases']}Âõû<br>
                <strong>„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà:</strong> {selected_customer['engagement_score']*100:.0f}%<br>
                <strong>„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØ:</strong> {selected_customer['churn_probability']*100:.0f}%
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥‰∫àÊ∏¨
        predicted_actions = predict_next_action(selected_customer)
        
        st.markdown("##### üéØ Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥")
        
        for i, action in enumerate(predicted_actions, 1):
            probability_color = "#10b981" if action['probability'] > 0.6 else "#f59e0b" if action['probability'] > 0.4 else "#ef4444"
            
            st.markdown(f"""
            <div class="optimization-card">
                <div class="optimization-header">
                    <div class="optimization-title">{action['action']}</div>
                    <div class="optimization-impact" style="background: rgba({hex_to_rgb(probability_color.lstrip('#'))}, 0.2); color: {probability_color};">
                        {action['probability']*100:.0f}% ÊàêÂäüÁéá
                    </div>
                </div>
                <div style="color: #94a3b8;">
                    <strong>ÂÆüË°å„Çø„Ç§„Éü„É≥„Ç∞:</strong> {action['timing']}<br>
                    <strong>Êé®Â•®„ÉÅ„É£„Éç„É´:</strong> {action['channel']}
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # ‰∫àÊ∏¨„Éà„É¨„É≥„Éâ
    st.markdown("#### üìà Ë°åÂãï‰∫àÊ∏¨„Éà„É¨„É≥„Éâ")
    
    # ‰ªäÂæå30Êó•Èñì„ÅÆ‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàê
    future_dates = pd.date_range(start=datetime.now(), periods=30, freq='D')
    
    # Ë≥ºÂÖ•Á¢∫Áéá‰∫àÊ∏¨
    base_purchase_prob = 0.1 if selected_customer['total_purchases'] > 0 else 0.05
    purchase_probs = []
    
    for i, date in enumerate(future_dates):
        # ÊôÇÈñìÁµåÈÅé„Å´„Çà„ÇãÁ¢∫ÁéáÂ§âÂãï
        time_factor = 1 + np.sin(i * 0.2) * 0.3  # Âë®ÊúüÁöÑÂ§âÂãï
        engagement_factor = selected_customer['engagement_score']
        
        prob = base_purchase_prob * time_factor * engagement_factor
        prob = max(0, min(1, prob + np.random.normal(0, 0.02)))
        purchase_probs.append(prob)
    
    # „ÉÅ„É£„Éº„É≥Á¢∫Áéá‰∫àÊ∏¨
    base_churn_prob = selected_customer['churn_probability']
    churn_probs = []
    
    for i, date in enumerate(future_dates):
        # ÊôÇÈñìÁµåÈÅé„Åß„ÉÅ„É£„Éº„É≥Á¢∫Áéá„ÅØÊº∏Â¢ó
        time_decay = 1 + (i / 30) * 0.5
        prob = base_churn_prob * time_decay
        prob = max(0, min(1, prob + np.random.normal(0, 0.01)))
        churn_probs.append(prob)
    
    # ‰∫àÊ∏¨„Ç∞„É©„Éï
    fig_prediction = go.Figure()
    
    fig_prediction.add_trace(go.Scatter(
        x=future_dates,
        y=[p*100 for p in purchase_probs],
        mode='lines+markers',
        name='Ë≥ºÂÖ•Á¢∫Áéá',
        line=dict(color='#10b981', width=3)
    ))
    
    fig_prediction.add_trace(go.Scatter(
        x=future_dates,
        y=[p*100 for p in churn_probs],
        mode='lines+markers',
        name='„ÉÅ„É£„Éº„É≥Á¢∫Áéá',
        line=dict(color='#ef4444', width=3)
    ))
    
    fig_prediction.update_layout(
        title="30Êó•ÈñìË°åÂãï‰∫àÊ∏¨",
        xaxis_title="Êó•‰ªò",
        yaxis_title="Á¢∫Áéá (%)",
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        hovermode='x unified'
    )
    
    st.plotly_chart(fig_prediction, use_container_width=True)
    
    # „Çª„Ç∞„É°„É≥„ÉàÂà•‰∫àÊ∏¨„Çµ„Éû„É™„Éº
    st.markdown("#### üìä „Çª„Ç∞„É°„É≥„ÉàÂà•‰∫àÊ∏¨„Çµ„Éû„É™„Éº")
    
    for segment_name, segment_data in customer_segments.items():
        segment_customers = segment_data['customers']
        
        # „Çª„Ç∞„É°„É≥„ÉàÂπ≥Âùá‰∫àÊ∏¨
        avg_next_purchase = np.random.uniform(7, 45)  # Êó•Êï∞
        avg_ltv_growth = np.random.uniform(-10, 50)   # %
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"**{segment_name}**")
        
        with col2:
            st.metric("Ê¨°ÂõûË≥ºÂÖ•‰∫àÊ∏¨", f"{avg_next_purchase:.0f}Êó•Âæå")
        
        with col3:
            st.metric("LTVÊàêÈï∑‰∫àÊ∏¨", f"{avg_ltv_growth:+.1f}%")

# „ÉÅ„É£„Éº„É≥ÂàÜÊûê„Çø„Éñ
with tabs[3]:
    st.markdown("### ‚ö†Ô∏è „ÉÅ„É£„Éº„É≥ÂàÜÊûê„ÉªÈò≤Ê≠¢„Ç∑„Çπ„ÉÜ„É†")
    
    # „ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØÂàÜÂ∏É
    churn_levels = {
        'High Risk (70%+)': len([c for c in customers if c['churn_probability'] >= 0.7]),
        'Medium Risk (40-70%)': len([c for c in customers if 0.4 <= c['churn_probability'] < 0.7]),
        'Low Risk (<40%)': len([c for c in customers if c['churn_probability'] < 0.4])
    }
    
    # „ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØÂèØË¶ñÂåñ
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üö® „ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØÂàÜÂ∏É")
        
        risk_colors = ['#ef4444', '#f59e0b', '#10b981']
        
        fig_churn = px.pie(
            values=list(churn_levels.values()),
            names=list(churn_levels.keys()),
            color_discrete_sequence=risk_colors
        )
        
        fig_churn.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        
        st.plotly_chart(fig_churn, use_container_width=True)
    
    with col2:
        st.markdown("#### üìä „ÉÅ„É£„Éº„É≥Ë¶ÅÂõ†ÂàÜÊûê")
        
        churn_factors = {
            '‰Ωé„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà': 0.45,
            'Èï∑ÊúüÊú™Ë≥ºÂÖ•': 0.32,
            'Á´∂ÂêàÊµÅÂá∫': 0.28,
            '„Çµ„Éù„Éº„ÉàÂïèÈ°å': 0.18,
            '‰æ°Ê†º‰∏çÊ∫Ä': 0.15,
            'Ê©üËÉΩ‰∏çË∂≥': 0.12
        }
        
        fig_factors = px.bar(
            x=list(churn_factors.values()),
            y=list(churn_factors.keys()),
            orientation='h',
            color=list(churn_factors.values()),
            color_continuous_scale="Reds"
        )
        
        fig_factors.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            xaxis_title="ÂΩ±ÈüøÂ∫¶"
        )
        
        st.plotly_chart(fig_factors, use_container_width=True)
    
    # È´ò„É™„Çπ„ÇØÈ°ßÂÆ¢„É™„Çπ„Éà
    st.markdown("#### üö® Á∑äÊÄ•ÂØæÂøúÂøÖË¶ÅÈ°ßÂÆ¢")
    
    high_risk_customers = [c for c in customers if c['churn_probability'] >= 0.7]
    high_risk_customers.sort(key=lambda x: x['churn_probability'], reverse=True)
    
    for customer in high_risk_customers[:10]:
        churn_class = "churn-high" if customer['churn_probability'] >= 0.8 else "churn-prediction"
        
        st.markdown(f"""
        <div class="{churn_class}">
            <div style="display: flex; justify-content: between; align-items: center;">
                <div>
                    <h4 style="color: #ef4444; margin-bottom: 10px;">{customer['id']}</h4>
                    <div>
                        <strong>„Çπ„ÉÜ„Éº„Ç∏:</strong> {customer['stage']}<br>
                        <strong>LTV:</strong> ¬•{customer['ltv']:,.0f}<br>
                        <strong>ÊúÄÁµÇË≥ºÂÖ•:</strong> {customer['last_purchase'].strftime('%Y-%m-%d')}<br>
                        <strong>„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà:</strong> {customer['engagement_score']*100:.0f}%
                    </div>
                </div>
                <div class="churn-score">
                    <div class="churn-percentage">{customer['churn_probability']*100:.0f}%</div>
                    <div style="color: #94a3b8; font-size: 0.9rem;">„ÉÅ„É£„Éº„É≥Á¢∫Áéá</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button(f"üìß Á∑äÊÄ•„É°„Éº„É´ÈÄÅ‰ø°", key=f"email_{customer['id']}"):
                st.success(f"‚úÖ {customer['id']}„Å´Á∑äÊÄ•ÊåΩÁïô„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü")
        
        with col2:
            if st.button(f"‚òéÔ∏è ÂÄãÂà•„Ç≥„É≥„Çø„ÇØ„Éà", key=f"call_{customer['id']}"):
                st.success(f"üìû {customer['id']}„Å∏„ÅÆÂÄãÂà•„Ç≥„É≥„Çø„ÇØ„Éà„Çí‰∫àÁ¥Ñ„Åó„Åæ„Åó„Åü")
        
        with col3:
            if st.button(f"üéÅ ÁâπÂà•„Ç™„Éï„Ç°„Éº", key=f"offer_{customer['id']}"):
                st.success(f"üéØ {customer['id']}„Å´ÁâπÂà•„Ç™„Éï„Ç°„Éº„ÇíÈÖç‰ø°„Åó„Åæ„Åó„Åü")
        
        st.markdown("---")
    
    # „ÉÅ„É£„Éº„É≥Èò≤Ê≠¢„Ç≠„É£„É≥„Éö„Éº„É≥ÂäπÊûú
    st.markdown("#### üìà „ÉÅ„É£„Éº„É≥Èò≤Ê≠¢„Ç≠„É£„É≥„Éö„Éº„É≥ÂäπÊûú")
    
    campaign_results = {
        '„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„É°„Éº„É´': {'success_rate': 0.35, 'cost_per_retention': 2500},
        'ÈôêÂÆö„Ç™„Éï„Ç°„Éº': {'success_rate': 0.42, 'cost_per_retention': 4200},
        'ÂÄãÂà•„Ç≥„É≥„Çµ„É´„ÉÜ„Éº„Ç∑„Éß„É≥': {'success_rate': 0.58, 'cost_per_retention': 8500},
        'VIPÂæÖÈÅá„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ': {'success_rate': 0.48, 'cost_per_retention': 5800}
    }
    
    for campaign, results in campaign_results.items():
        roi = (20000 * results['success_rate'] - results['cost_per_retention']) / results['cost_per_retention'] * 100
        roi_class = "roi-positive" if roi > 0 else "roi-negative"
        
        st.markdown(f"""
        <div class="optimization-card">
            <div class="optimization-header">
                <div class="optimization-title">{campaign}</div>
                <div class="optimization-impact">ROI: {roi:+.0f}%</div>
            </div>
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-top: 10px;">
                <div style="text-align: center;">
                    <div style="color: #06b6d4; font-weight: bold;">{results['success_rate']*100:.0f}%</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">ÊàêÂäüÁéá</div>
                </div>
                <div style="text-align: center;">
                    <div style="color: #ef4444; font-weight: bold;">¬•{results['cost_per_retention']:,}</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">È°ßÂÆ¢ÂΩì„Åü„Çä„Ç≥„Çπ„Éà</div>
                </div>
                <div style="text-align: center;">
                    <div style="color: #10b981; font-weight: bold;">¬•{results['success_rate'] * 20000:,.0f}</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">ÊúüÂæÖÊåΩÁïô‰æ°ÂÄ§</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# ÊúÄÈÅ©ÂåñÊèêÊ°à„Çø„Éñ
with tabs[4]:
    st.markdown("### üìä AIÊúÄÈÅ©ÂåñÊèêÊ°à")
    
    # ÂÖ®‰ΩìÊúÄÈÅ©Âåñ„Çµ„Éû„É™„Éº
    st.markdown("#### üéØ ÂÖ®‰ΩìÊúÄÈÅ©Âåñ„Çµ„Éû„É™„Éº")
    
    optimization_opportunities = [
        {
            'area': 'Awareness ‚Üí ConsiderationËª¢Êèõ',
            'current': '62%',
            'potential': '78%',
            'impact': '+¬•2.4M Âπ¥ÈñìÂèéÁõä',
            'effort': 'Medium',
            'recommendation': '„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞Âº∑Âåñ„ÄÅSEOÊúÄÈÅ©Âåñ'
        },
        {
            'area': 'Trial ‚Üí PurchaseËª¢Êèõ',
            'current': '28%',
            'potential': '45%',
            'impact': '+¬•3.8M Âπ¥ÈñìÂèéÁõä',
            'effort': 'High',
            'recommendation': '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÊîπÂñÑ„ÄÅ„Éà„É©„Ç§„Ç¢„É´ÊúüÈñìÊúÄÈÅ©Âåñ'
        },
        {
            'area': '„ÉÅ„É£„Éº„É≥ÁéáÂâäÊ∏õ',
            'current': '18%',
            'potential': '12%',
            'impact': '+¬•1.9M ÊåΩÁïô‰æ°ÂÄ§',
            'effort': 'Medium',
            'recommendation': '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏ä„ÄÅ„Éó„É≠„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çµ„Éù„Éº„Éà'
        },
        {
            'area': 'LTVÂêë‰∏ä',
            'current': '¬•22k',
            'potential': '¬•31k',
            'impact': '+¬•9M Á∑è‰æ°ÂÄ§Âêë‰∏ä',
            'effort': 'Low',
            'recommendation': '„Ç¢„ÉÉ„Éó„Çª„É´„Éª„ÇØ„É≠„Çπ„Çª„É´Ëá™ÂãïÂåñ'
        }
    ]
    
    for opt in optimization_opportunities:
        effort_colors = {'Low': '#10b981', 'Medium': '#f59e0b', 'High': '#ef4444'}
        effort_color = effort_colors.get(opt['effort'], '#06b6d4')
        
        st.markdown(f"""
        <div class="prediction-insight">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <div class="insight-title">{opt['area']}</div>
                <div style="background: {effort_color}; color: white; padding: 4px 12px; border-radius: 15px; font-size: 0.8rem;">
                    {opt['effort']} Èõ£ÊòìÂ∫¶
                </div>
            </div>
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin-bottom: 15px;">
                <div style="text-align: center;">
                    <div style="color: #ef4444; font-weight: bold; font-size: 1.2rem;">{opt['current']}</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">ÁèæÂú®</div>
                </div>
                <div style="text-align: center;">
                    <div style="color: #10b981; font-weight: bold; font-size: 1.2rem;">{opt['potential']}</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">ÁõÆÊ®ô</div>
                </div>
                <div style="text-align: center;">
                    <div style="color: #06b6d4; font-weight: bold; font-size: 1.2rem;">{opt['impact']}</div>
                    <div style="color: #94a3b8; font-size: 0.8rem;">„Ç§„É≥„Éë„ÇØ„Éà</div>
                </div>
            </div>
            <div style="background: rgba(6, 182, 212, 0.1); padding: 10px; border-radius: 8px;">
                <strong>Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥:</strong> {opt['recommendation']}
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # ÂÑ™ÂÖàÂ∫¶„Éû„Éà„É™„ÉÉ„ÇØ„Çπ
    st.markdown("#### üìà ÂÑ™ÂÖàÂ∫¶„Éû„Éà„É™„ÉÉ„ÇØ„Çπ")
    
    # „Ç§„É≥„Éë„ÇØ„Éà vs ÂÆüË£ÖÈõ£ÊòìÂ∫¶
    impact_values = [2.4, 3.8, 1.9, 9.0]  # MillionÂÜÜ
    effort_values = [2, 3, 2, 1]  # 1=Low, 2=Medium, 3=High
    area_names = [opt['area'] for opt in optimization_opportunities]
    
    fig_matrix = px.scatter(
        x=effort_values,
        y=impact_values,
        size=[abs(val) for val in impact_values],
        color=impact_values,
        hover_name=area_names,
        labels={'x': 'ÂÆüË£ÖÈõ£ÊòìÂ∫¶', 'y': '„Ç§„É≥„Éë„ÇØ„Éà (Áôæ‰∏áÂÜÜ)'},
        title="ÊúÄÈÅ©ÂåñÂÑ™ÂÖàÂ∫¶„Éû„Éà„É™„ÉÉ„ÇØ„Çπ",
        color_continuous_scale="Viridis"
    )
    
    fig_matrix.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        xaxis=dict(tickmode='array', tickvals=[1, 2, 3], ticktext=['Low', 'Medium', 'High'])
    )
    
    # ÁêÜÊÉ≥ÁöÑ„Å™È†òÂüü„Çí„Éè„Ç§„É©„Ç§„Éà
    fig_matrix.add_shape(
        type="rect",
        x0=0.5, y0=3, x1=2.5, y1=10,
        fillcolor="rgba(16, 185, 129, 0.1)",
        line=dict(color="rgba(16, 185, 129, 0.3)", width=2),
    )
    
    fig_matrix.add_annotation(
        x=1.5, y=6.5,
        text="Quick Wins",
        showarrow=False,
        font=dict(color="#10b981", size=14, family="Arial Black")
    )
    
    st.plotly_chart(fig_matrix, use_container_width=True)
    
    # ÂÆüË£Ö„É≠„Éº„Éâ„Éû„ÉÉ„Éó
    st.markdown("#### üóìÔ∏è ÂÆüË£Ö„É≠„Éº„Éâ„Éû„ÉÉ„Éó")
    
    roadmap_items = [
        {'month': 'Month 1', 'item': '„Ç¢„ÉÉ„Éó„Çª„É´„Éª„ÇØ„É≠„Çπ„Çª„É´Ëá™ÂãïÂåñ', 'status': 'ready'},
        {'month': 'Month 2', 'item': '„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞Âº∑Âåñ', 'status': 'planning'},
        {'month': 'Month 3', 'item': '„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂêë‰∏äÊñΩÁ≠ñ', 'status': 'planning'},
        {'month': 'Month 4-6', 'item': '„Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÊîπÂñÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà', 'status': 'future'}
    ]
    
    for item in roadmap_items:
        status_colors = {'ready': '#10b981', 'planning': '#f59e0b', 'future': '#94a3b8'}
        status_color = status_colors.get(item['status'], '#06b6d4')
        
        st.markdown(f"""
        <div class="lifecycle-stage" style="border-left-color: {status_color};">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div>
                    <h5 style="color: {status_color}; margin-bottom: 5px;">{item['month']}</h5>
                    <div style="color: #e2e8f0;">{item['item']}</div>
                </div>
                <div style="background: {status_color}; color: white; padding: 4px 12px; border-radius: 15px; font-size: 0.8rem;">
                    {item['status'].upper()}
                </div>
            </div>
            <div class="lifecycle-progress">
                <div class="lifecycle-fill" style="width: {'100' if item['status'] == 'ready' else '60' if item['status'] == 'planning' else '0'}%;"></div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# „Çµ„Ç§„Éâ„Éê„Éº
with st.sidebar:
    st.header("üõ§Ô∏è „Ç∏„É£„Éº„Éã„Éº„Ç®„É≥„Ç∏„É≥")
    
    # „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ
    st.subheader("üì° „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ")
    
    st.markdown("""
    <div class="realtime-data">
        <div class="realtime-indicator"></div>
        <h5 style="color: #06b6d4; margin-bottom: 10px;">„É©„Ç§„Éñ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£</h5>
        <div style="font-size: 0.9rem; color: #94a3b8;">
            ‚Ä¢ 3ÂàÜÂâç: Êñ∞Ë¶èÈ°ßÂÆ¢„ÅåTrialÈñãÂßã<br>
            ‚Ä¢ 7ÂàÜÂâç: High-Value„Çª„Ç∞„É°„É≥„ÉàË≥ºÂÖ•<br>
            ‚Ä¢ 12ÂàÜÂâç: At-RiskÈ°ßÂÆ¢„Ç®„É≥„Ç≤„Éº„Ç∏<br>
            ‚Ä¢ 18ÂàÜÂâç: „Ç∏„É£„Éº„Éã„Éº„Çπ„ÉÜ„Éº„Ç∏ÈÅ∑Áßª
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # ‰ªäÊó•„ÅÆÁµ±Ë®à
    st.subheader("üìä Êú¨Êó•„ÅÆÁµ±Ë®à")
    
    st.metric("Êñ∞Ë¶èÈ°ßÂÆ¢", "47", "+12")
    st.metric("„Çπ„ÉÜ„Éº„Ç∏ÈÅ∑Áßª", "123", "+8")
    st.metric("„ÉÅ„É£„Éº„É≥Èò≤Ê≠¢", "15", "+3")
    
    conversion_today = np.random.uniform(15, 25)
    st.metric("Á∑èÂêàËª¢ÊèõÁéá", f"{conversion_today:.1f}%", "+2.3%")
    
    st.markdown("---")
    
    # AI‰∫àÊ∏¨Á≤æÂ∫¶
    st.subheader("ü§ñ AI‰∫àÊ∏¨Á≤æÂ∫¶")
    
    accuracy_metrics = [
        ("Ë≥ºÂÖ•‰∫àÊ∏¨", 94.2),
        ("„ÉÅ„É£„Éº„É≥‰∫àÊ∏¨", 87.8),
        ("LTV‰∫àÊ∏¨", 91.5),
        ("„Çª„Ç∞„É°„É≥„ÉàÂàÜÈ°û", 96.1)
    ]
    
    for metric, accuracy in accuracy_metrics:
        st.markdown(f"**{metric}**: {accuracy}%")
        st.progress(accuracy / 100)
    
    st.markdown("---")
    
    # Á∑äÊÄ•„Ç¢„É©„Éº„Éà
    st.subheader("üö® Á∑äÊÄ•„Ç¢„É©„Éº„Éà")
    
    urgent_alerts = [
        {"level": "high", "message": "È´ò‰æ°ÂÄ§È°ßÂÆ¢„ÅÆ„ÉÅ„É£„Éº„É≥„É™„Çπ„ÇØÊÄ•‰∏äÊòá", "time": "5ÂàÜÂâç"},
        {"level": "medium", "message": "Trial‚ÜíPurchaseËª¢ÊèõÁéá‰Ωé‰∏ã", "time": "1ÊôÇÈñìÂâç"},
        {"level": "low", "message": "Êñ∞„Çª„Ç∞„É°„É≥„ÉàÂΩ¢Êàê„ÇíÊ§úÂá∫", "time": "3ÊôÇÈñìÂâç"}
    ]
    
    for alert in urgent_alerts:
        alert_icons = {"high": "üî¥", "medium": "üü°", "low": "üîµ"}
        st.markdown(f"{alert_icons[alert['level']]} {alert['message']}")
        st.caption(alert['time'])
    
    st.markdown("---")
    
    # Ëá™ÂãïÂåñË®≠ÂÆö
    st.subheader("‚öôÔ∏è Ëá™ÂãïÂåñË®≠ÂÆö")
    
    auto_churn_prevention = st.checkbox("„ÉÅ„É£„Éº„É≥Èò≤Ê≠¢Ëá™ÂãïÂÆüË°å", value=True)
    auto_segmentation = st.checkbox("„É™„Ç¢„É´„Çø„Ç§„É†„Çª„Ç∞„É°„É≥„ÉàÊõ¥Êñ∞", value=True)
    auto_recommendations = st.checkbox("AIÊé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥", value=True)
    
    st.markdown("---")
    
    # „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éª„É¨„Éù„Éº„Éà
    st.subheader("üì• „Ç®„ÇØ„Çπ„Éù„Éº„Éà")
    
    if st.button("üìä „Ç∏„É£„Éº„Éã„ÉºÂàÜÊûê„É¨„Éù„Éº„Éà", use_container_width=True):
        st.success("üìà Ë©≥Á¥∞„Ç∏„É£„Éº„Éã„ÉºÂàÜÊûê„É¨„Éù„Éº„Éà„ÇíÁîüÊàê‰∏≠...")
    
    if st.button("üíæ È°ßÂÆ¢„Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„Éà", use_container_width=True):
        export_data = {
            "customers": len(customers),
            "segments": len(customer_segments),
            "journey_stages": list(journey_metrics.keys()),
            "export_timestamp": datetime.now().isoformat()
        }
        
        st.download_button(
            "üì• JSON„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
            data=json.dumps(export_data, ensure_ascii=False, indent=2),
            file_name=f"customer_journey_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )
    
    st.markdown("---")
    
    # „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥
    st.subheader("üß≠ „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥")
    
    if st.button("üè† „Éõ„Éº„É†„Å´Êàª„Çã", use_container_width=True):
        st.switch_page("app.py")
    
    if st.button("üéØ „Ç¢„Éà„É™„Éì„É•„Éº„Ç∑„Éß„É≥ÂàÜÊûê", use_container_width=True):
        st.switch_page("pages/attribution_analysis.py")
    
    if st.button("‚ö° „É™„Ç¢„É´„Çø„Ç§„É†ÊúÄÈÅ©Âåñ", use_container_width=True):
        st.switch_page("pages/realtime_ad_optimizer.py")

# „Éï„ÉÉ„Çø„Éº
st.markdown("---")
st.caption("üõ§Ô∏è Customer Journey Engine: AIÈßÜÂãï„ÅÆÊ¨°‰∏ñ‰ª£È°ßÂÆ¢„Ç∏„É£„Éº„Éã„ÉºÂàÜÊûê„Åß„ÄÅ„Åô„Åπ„Å¶„ÅÆÈ°ßÂÆ¢‰ΩìÈ®ì„ÇíÊúÄÈÅ©Âåñ„Åó„ÄÅ„Éì„Ç∏„Éç„ÇπÊàêÈï∑„ÇíÂä†ÈÄü„Åï„Åõ„Åæ„Åô„ÄÇ")